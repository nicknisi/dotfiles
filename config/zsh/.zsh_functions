#!/usr/bin/env zsh

autoload -Uz compinit
compinit

# directory navigation functions with completion
for func dir in c '$CODE_DIR' h '$HOME'; do
  eval "
  $func() { cd $dir/\$1 }
  _$func() { _files -W $dir -/ }
  compdef _$func $func
  "
done

g() {
  if [[ $# > 0 ]]; then
    # if there are arguments, send them to git
    git $@
  else
    # otherwise, run git status
    git s
  fi
}

last_modified() {
  ls -lt $1 | head -n 2 | tail -n 1 | awk '{print $6, $7, $8}'
}

md() {
  mkdir -p $1 && cd $1
}

prepend_path() {
  [[ ! -d "$1" ]] && return

  path=(
    $1
    $path
  )
}

zfetch() {
  # terminal colors
  local TC='\e[' Rst="\e[0m" Red="\e[31m" Yel="\e[33m" Blu="\e[34m"

  git_clone_error_msg() {
    echo -e "  ${Red}[ERROR]${Rst} git clone errored: ${Red}${1}${Rst}. ${Yel}aborting...${Rst}"
  }

case $1 in
  update)
    for name in ${(@k)plugins}; do
      (cd $plugins[$name] && echo -e "Updating ${Yel}${name}${Rst}..." && git pull --quiet --recurse-submodules)
    done
    ;;
  ls)
    for name in ${(@k)plugins}; do
      echo -e "${name}: ${Yel}$plugins[$name]${Rst}"
    done
    ;;
  *)

    local name="$1"
    local plugin_name="${2:-"${name##*/}.plugin.zsh"}"
    local dest="${3:-"$ZPLUGDIR"}"

    # append name to dest if it ends with /
    [[ $dest == */ ]] && dest=$dest$name || dest=$dest/$name

    plugins[$name]=$dest

    if [[ ! -d $dest ]]; then
      local url=git@github.com:$name
      local ref=$3
      echo -e "Missing plugin ${Yel}${name}${Rst}"
      echo -e "  Cloning from ${Blu}${url}${Rst}..."

      local clone_cmd="git clone --quiet"
      [[ -z $ref ]] && clone_cmd+=" --depth 1"
      if eval "$clone_cmd $url $dest"; then
        if [[ -n $ref ]]; then
          (cd $dest && git checkout --quiet $ref)
          echo -e "  Checked out branch ${ref}"
        else
          echo -e "  Checked out default branch"
        fi
      else
        git_clone_error_msg $?
        return $?
      fi
    fi

    local plugin="$dest/$plugin_name"
    [[ -f "$plugin" ]] && source "$plugin"
    ;;
esac
}

